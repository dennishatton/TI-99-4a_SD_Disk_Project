Asm994a TMS99000 Assembler - v3.010

                * Asm994a Generated Register Equates
                *
      0000 0000 R0      EQU     0 
      0000 0001 R1      EQU     1 
      0000 0002 R2      EQU     2 
      0000 0003 R3      EQU     3 
      0000 0004 R4      EQU     4 
      0000 0005 R5      EQU     5 
      0000 0006 R6      EQU     6 
      0000 0007 R7      EQU     7 
      0000 0008 R8      EQU     8 
      0000 0009 R9      EQU     9 
      0000 000A R10     EQU     10
      0000 000B R11     EQU     11
      0000 000C R12     EQU     12
      0000 000D R13     EQU     13
      0000 000E R14     EQU     14
      0000 000F R15     EQU     15
                *
   1  0000 2094 EAREG   EQU >2094       ;EA Registers
   2  0000 209A DSRREG EQU >209A
   3  0000 2700 MYREG   EQU >2700       ;My Registers
   4  0000 2720 BUFF1   EQU >2720       ;223 bytes
   5  0000 27FD DSKNUM  EQU >27FD       ;Saved disk number for DSK1-3 (3 bytes)
   6  0000 2800 BUFF2   EQU >2800       ;>1800(6144) bytes
   7  0000 2720 KEYBUF EQU BUFF1
   8            *
   9                    AORG >6000      ;Standard Header (ROM can have programs)
  10  6000 AA           BYTE >AA        ;6000   Identification
  11  6001 01           BYTE >01        ;6001   Version number
  12  6002 00           BYTE 0          ;6002   Number of programs
  13  6003 00           BYTE 0          ;6003   Reserved
  14  6004 0000         DATA 0          ;6004   Power up routine header
  15  6006 6010         DATA PRGM       ;6006   User program header
  16  6008 0000         DATA 0          ;6008   DSR header
  17  600A 0000         DATA 0          ;600A   Subroutine link header
  18  600C 0000         DATA 0          ;600C   Address of interrupt link
  19  600E 0000         DATA 0          ;600E   Address of BASIC subroutine libraries
  20            ***
  21  6010 0000 PRGM    DATA >0000
  22  6012 6182         DATA START      
  23  6014 13           BYTE _MSG1-MSG1
  24  6015 5449 MSG1    TEXT 'TI DISKS ON SD CARD'
  24  6017 2044  
  24  6019 4953  
  24  601B 4B53  
  24  601D 204F  
  24  601F 4E20  
  24  6021 5344  
  24  6023 2043  
  24  6025 4152  
  24  6027 44    
  25            _MSG1
  26            *
  27  6028 5052 MSG2    TEXT 'PRESS UP DN/SPACE BACK QUIT   '
  27  602A 4553  
  27  602C 5320  
  27  602E 5550  
  27  6030 2044  
  27  6032 4E2F  
  27  6034 5350  
  27  6036 4143  
  27  6038 4520  
  27  603A 4241  
  27  603C 434B  
  27  603E 2051  
  27  6040 5549  
  27  6042 5420  
  27  6044 2020  
  28            _MSG2
  29  6046 5245 MSG3    TEXT 'READING DISK NAMES'           '
  29  6048 4144  
  29  604A 494E  
  29  604C 4720  
  29  604E 4449  
  29  6050 534B  
  29  6052 204E  
  29  6054 414D  
  29  6056 4553  
  30            _MSG3
  31  6058 4453 MSG4    TEXT 'DSK1.     DSK2.     DSK3.     '
  31  605A 4B31  
  31  605C 2E20  
  31  605E 2020  
  31  6060 2020  
  31  6062 4453  
  31  6064 4B32  
  31  6066 2E20  
  31  6068 2020  
  31  606A 2020  
  31  606C 4453  
  31  606E 4B33  
  31  6070 2E20  
  31  6072 2020  
  31  6074 2020  
  32            _MSG4
  33  6076 4E45 MSG5    TEXT 'NEW DISK NUMBER (0-255)?      '
  33  6078 5720  
  33  607A 4449  
  33  607C 534B  
  33  607E 204E  
  33  6080 554D  
  33  6082 4245  
  33  6084 5220  
  33  6086 2830  
  33  6088 2D32  
  33  608A 3535  
  33  608C 293F  
  33  608E 2020  
  33  6090 2020  
  33  6092 2020  
  34            _MSG5
  35  6094 312D MSG6    TEXT '1-3=CAT DSK, FCTN 1-3=MNT DSK '
  35  6096 333D  
  35  6098 4341  
  35  609A 5420  
  35  609C 4453  
  35  609E 4B2C  
  35  60A0 2046  
  35  60A2 4354  
  35  60A4 4E20  
  35  60A6 312D  
  35  60A8 333D  
  35  60AA 4D4E  
  35  60AC 5420  
  35  60AE 4453  
  35  60B0 4B20  
  36            _MSG6
  37  60B2 4341 MSG7    TEXT 'CATALOG DISK'
  37  60B4 5441  
  37  60B6 4C4F  
  37  60B8 4720  
  37  60BA 4449  
  37  60BC 534B  
  38            _MSG7
  39  60BE 2020 MSG8    TEXT '  DSK1 -  DISKNAME=             '
  39  60C0 4453  
  39  60C2 4B31  
  39  60C4 202D  
  39  60C6 2020  
  39  60C8 4449  
  39  60CA 534B  
  39  60CC 4E41  
  39  60CE 4D45  
  39  60D0 3D20  
  39  60D2 2020  
  39  60D4 2020  
  39  60D6 2020  
  39  60D8 2020  
  39  60DA 2020  
  39  60DC 2020  
  40  60DE 2020         TEXT '  AVAILABLE=      USED=         '
  40  60E0 4156  
  40  60E2 4149  
  40  60E4 4C41  
  40  60E6 424C  
  40  60E8 453D  
  40  60EA 2020  
  40  60EC 2020  
  40  60EE 2020  
  40  60F0 5553  
  40  60F2 4544  
  40  60F4 3D20  
  40  60F6 2020  
  40  60F8 2020  
  40  60FA 2020  
  40  60FC 2020  
  41  60FE 2020         TEXT '   FILENAME  SIZE    TYPE    P  '
  41  6100 2046  
  41  6102 494C  
  41  6104 454E  
  41  6106 414D  
  41  6108 4520  
  41  610A 2053  
  41  610C 495A  
  41  610E 4520  
  41  6110 2020  
  41  6112 2054  
  41  6114 5950  
  41  6116 4520  
  41  6118 2020  
  41  611A 2050  
  41  611C 2020  
  42  611E 2020         TEXT '  ---------- ---- ---------- -  '
  42  6120 2D2D  
  42  6122 2D2D  
  42  6124 2D2D  
  42  6126 2D2D  
  42  6128 2D2D  
  42  612A 202D  
  42  612C 2D2D  
  42  612E 2D20  
  42  6130 2D2D  
  42  6132 2D2D  
  42  6134 2D2D  
  42  6136 2D2D  
  42  6138 2D2D  
  42  613A 202D  
  42  613C 2020  
  43            _MSG8
  44  613E 4449 TYPTBL  TEXT 'DIS/FIX DIS/VAR INT/FIX INT/VAR PROGRAM'
  44  6140 532F  
  44  6142 4649  
  44  6144 5820  
  44  6146 4449  
  44  6148 532F  
  44  614A 5641  
  44  614C 5220  
  44  614E 494E  
  44  6150 542F  
  44  6152 4649  
  44  6154 5820  
  44  6156 494E  
  44  6158 542F  
  44  615A 5641  
  44  615C 5220  
  44  615E 5052  
  44  6160 4F47  
  44  6162 5241  
  44  6164 4D    
  45  6165 30   ASCII0  TEXT '0'
  46  6166 BF   BF      BYTE >BF
  47  0000 605D SPACE   EQU MSG4+5
  48            ;DOT    EQU MSG4+4      ;Defined in DSRLNK
  49            *********************
  50  6167 0000         EVEN
  51  0000 1000 PABBUF  EQU >1000
  52  0000 0F80 PAB     EQU >F80
  53  0000 837C STATUS  EQU >837C
  54  0000 8356 PNTR    EQU >8356
  55  6168 000D PDATA   DATA >000D,PABBUF,>0000,>0000,>0005
  55  616A 1000  
  55  616C 0000  
  55  616E 0000  
  55  6170 0005  
  56  6172 4453         TEXT 'DSK1.'
  56  6174 4B31  
  56  6176 2E    
  57  6177 0000         EVEN
  58  6178 02   READ    BYTE >02
  59  6179 01   CLOSE   BYTE >01
  60            *********************
  61                    EVEN
  62  617A 000A N10     DATA 10
  63  617C 0064 N100    DATA 100
  64  617E 03E8 N1000   DATA 1000
  65  6180 000B N11     DATA 11
  66            
  67  6182 02E0 START   LWPI MYREG              
  67  6184 2700  
  68  6186 04E0         CLR @>8374              ;Set scan for complete keyboard
  68  6188 8374  
  69            
  70            ****************************************
  71            *** Get disk names
  72            ****************************************
  73  618A 020C         LI R12, >1100           ;Disk CRU address
  73  618C 1100  
  74  618E 1D00         SBO 0                   ;Turn disk card on
  75  6190 0200         LI R0, >7D00            ;Command >82 inverted
  75  6192 7D00  
  76  6194 D800         MOVB R0, @>5FF8         ;Send command
  76  6196 5FF8  
  77            
  78            * Print 'READING DISK NAMES'
  79  6198 0200         LI R0, ROW8+1           ;
  79  619A 0101  
  80  619C 0201         LI R1, MSG3             
  80  619E 6046  
  81  61A0 0202         LI R2, _MSG3-MSG3       ;
  81  61A2 0012  
  82  61A4 0420         BLWP @VMBW
  82  61A6 6830  
  83  61A8 0220         AI R0, _MSG3-MSG3       ;
  83  61AA 0012  
  84  61AC D060         MOVB @DOT, R1           ;'.'
  84  61AE 673E  
  85            
  86  61B0 0205         LI R5, DSKNUM
  86  61B2 27FD  
  87  61B4 0204         LI R4, 3                ;3 drives
  87  61B6 0003  
  88            LP05
  89  61B8 D1A0         MOVB @>5FFE, R6         ;Get DSKx disk number
  89  61BA 5FFE  
  90  61BC 0546         INV R6
  91  61BE DD46         MOVB R6, *R5+           ;Store in BUFF1
  92  61C0 0604         DEC R4                  ;Next
  93  61C2 16FA         JNE LP05                ; "
  94            
  95  61C4 0205         LI R5, BUFF2            
  95  61C6 2800  
  96  61C8 0202         LI R2, 256              ;256 disks
  96  61CA 0100  
  97  61CC 04C3         CLR R3                  ;Disk number 0
  98            
  99            LP01    
 100  61CE 0420         BLWP @VSBW              ;Put '.' on screen
 100  61D0 682C  
 101  61D2 0580         INC R0                  ; "     
 102  61D4 DD43         MOVB R3,*R5+            ;Disk number in buffer
 103  61D6 0223         AI R3,>0100             ;Next disk number
 103  61D8 0100  
 104                    
 105  61DA 0204         LI R4, 10               ;10 Chars per disk name
 105  61DC 000A  
 106                    ;LI R6,>3000 *remove
 107            LP08    
 108  61DE D1A0         MOVB @>5FFE, R6 ;Get Char
 108  61E0 5FFE  
 109  61E2 0546         INV R6                  ;Invert
 110                    ;AI R6,>0100 *remove
 111  61E4 DD46         MOVB R6, *R5+           ;Store Char in buffer
 112  61E6 0604         DEC R4                  ;Next Char
 113  61E8 16FA         JNE LP08                ; "
 114            
 115  61EA 0602         DEC R2                  ;Next disk
 116  61EC 16F0         JNE LP01                ; "
 117             
 118  61EE 1E00         SBZ 0                   ;Turn disk card off
 119            ****************************************
 120            *** Put header and footer on screen
 121            ****************************************
 122            MAIN
 123  61F0 06A0         BL @CLS                 ;Clear screen
 123  61F2 65EC  
 124            
 125  61F4 0200         LI R0, ROW0+6           ;Header
 125  61F6 0006  
 126  61F8 0201         LI R1, MSG1
 126  61FA 6015  
 127  61FC 0202         LI R2, _MSG1-MSG1       ;
 127  61FE 0013  
 128  6200 0420         BLWP @VMBW
 128  6202 6830  
 129            
 130  6204 06A0         BL @DSPDSK              ;Drives disk names
 130  6206 6614  
 131  6208 06A0         BL @DSPCHG              ;Display Press 1-3
 131  620A 6602  
 132             
 133  620C 0200         LI R0, ROW22+1          ;Footer
 133  620E 02C1  
 134  6210 0201         LI R1, MSG2
 134  6212 6028  
 135  6214 0202         LI R2, _MSG2-MSG2       ;
 135  6216 001E  
 136  6218 0420         BLWP @VMBW
 136  621A 6830  
 137            ****************************************
 138            *** Put names on screen
 139            ****************************************
 140  621C 0201         LI R1, BUFF2
 140  621E 2800  
 141            
 142  6220 0281 LP03    CI R1, BUFF2+2815       ;(256*11)-1
 142  6222 32FF  
 143  6224 1202         JLE JP01
 144  6226 0221         AI R1, -352             ;(32*11)
 144  6228 FEA0  
 145  622A 0281 JP01    CI R1, BUFF2
 145  622C 2800  
 146  622E 1402         JHE JP02
 147  6230 0221         AI R1, 352              ;(32*11)
 147  6232 0160  
 148            JP02
 149                    
 150  6234 0203         LI R3, 32               ;16 rows * 2
 150  6236 0020  
 151  6238 0200         LI R0, ROW5+1           ;Start row position
 151  623A 00A1  
 152  623C 0280 LP02    CI R0, ROW21+1
 152  623E 02A1  
 153  6240 1602          JNE JP03
 154  6242 0200          LI R0, ROW5+17
 154  6244 00B1  
 155  6246 D271 JP03     MOVB *R1+, R9
 156  6248 0989          SRL R9, 8
 157  624A C141          MOV R1, R5             ;Save R1 BUFF2 pointer
 158  624C 0201          LI R1, BUFF1
 158  624E 2720  
 159  6250 06A0          BL @CV2ASC
 159  6252 6670  
 160            
 161  6254 0201          LI R1, BUFF1+1 ;Display disk number
 161  6256 2721  
 162  6258 0202          LI R2, 3                       
 162  625A 0003  
 163  625C 0420          BLWP @VMBW
 163  625E 6830  
 164  6260 0220          AI R0, 4               ;Point to name field
 164  6262 0004  
 165            
 166  6264 C045          MOV R5, R1             ;Restore R1 BUFF2 pointer
 167  6266 0202          LI R2, 10              ;Display 10 characters
 167  6268 000A  
 168  626A 0420          BLWP @VMBW
 168  626C 6830  
 169  626E 0220          AI R0, 28              ;Finish row
 169  6270 001C  
 170  6272 0221          AI R1, 10              ;Next Disk
 170  6274 000A  
 171  6276 0603          DEC R3
 172  6278 16E1         JNE LP02
 173            
 174            ****************************************
 175            *** Get input from keyboard
 176            ****************************************
 177  627A 0420 LP10    BLWP @KSCAN
 177  627C 6828  
 178  627E D020         MOVB @STATUS,R0
 178  6280 837C  
 179  6282 13FB         JEQ LP10
 180            
 181  6284 04C3         CLR R3
 182  6286 D0E0         MOVB @>8375, R3
 182  6288 8375  
 183  628A 0283         CI R3, >0500            ;FCTN '=' QUIT
 183  628C 0500  
 184  628E 1327         JEQ QUIT
 185            
 186  6290 0283         CI R3, >3100            ;'1' Catalog DSK1
 186  6292 3100  
 187  6294 1326         JEQ CATDSK
 188  6296 0283         CI R3, >3200            ;'2' Catalog DSK2
 188  6298 3200  
 189  629A 1323         JEQ CATDSK  
 190  629C 0283         CI R3, >3300            ;'3' Catalog DSK3
 190  629E 3300  
 191  62A0 1320         JEQ CATDSK
 192              
 193  62A2 0283         CI R3, >0300            ;FCTN '1' Change DSK1   
 193  62A4 0300  
 194  62A6 1314         JEQ JP04
 195  62A8 0283         CI R3, >0400            ;FCTN '2' Change DSK2   
 195  62AA 0400  
 196  62AC 1311         JEQ JP04
 197  62AE 0283         CI R3, >0700            ;FCTN '3' Change DSK3
 197  62B0 0700  
 198  62B2 130E         JEQ JP04
 199            
 200  62B4 0243         ANDI R3, >DF00          ;If lowercase, make uppercase
 200  62B6 DF00  
 201  62B8 0283         CI R3, >5800            ;'X'    PGDN
 201  62BA 5800  
 202  62BC 13B1         JEQ LP03
 203  62BE 0283         CI R3, >0000            ;' '    PGDN    
 203  62C0 0000  
 204  62C2 13AE         JEQ LP03
 205  62C4 0283         CI R3, >4500            ;'E'    PGUP    
 205  62C6 4500  
 206  62C8 16D8         JNE LP10                ;Loop back to kscan
 207  62CA 0221         AI R1, -704             ;(64*11) Move 2 pages back 32 disk 
 207  62CC FD40  
 208  62CE 10A8         JMP LP03                        
 209            
 210  62D0 C201 JP04    MOV R1, R8              ;Save buffer position
 211  62D2 06A0         BL @CHGDSK              ;Call change disk
 211  62D4 64F0  
 212  62D6 06A0         BL @DSPDSK              ;Call display drives
 212  62D8 6614  
 213  62DA C048         MOV R8, R1              ;Restore buffer position
 214  62DC 10CE         JMP LP10                ;Loop back to kscan
 215            
 216  62DE 0420 QUIT    BLWP @>0000             ;reset
 216  62E0 0000  
 217            
 218            ****************************************
 219            *       Catalog disk
 220            * Entry: MSB R3=drive #
 221            ****************************************
 222            CATDSK
 223  62E2 06A0         BL @CLS
 223  62E4 65EC  
 224            
 225  62E6 0200         LI R0, ROW0+10          ;Catalog
 225  62E8 000A  
 226  62EA 0201         LI R1, MSG7
 226  62EC 60B2  
 227  62EE 0202         LI R2, _MSG7-MSG7       ;
 227  62F0 000C  
 228  62F2 0420         BLWP @VMBW
 228  62F4 6830  
 229            
 230  62F6 0200         LI R0, ROW22+1          ;Footer
 230  62F8 02C1  
 231  62FA 0201         LI R1, MSG2
 231  62FC 6028  
 232  62FE 0202         LI R2, _MSG2-MSG2       ;
 232  6300 001E  
 233  6302 0420         BLWP @VMBW
 233  6304 6830  
 234            
 235  6306 0200         LI R0, ROW2             ;Disk info at top
 235  6308 0040  
 236  630A 0201         LI R1, MSG8
 236  630C 60BE  
 237  630E 0202         LI R2, _MSG8-MSG8       ;
 237  6310 0080  
 238  6312 0420         BLWP @VMBW
 238  6314 6830  
 239            
 240  6316 D043         MOVB R3, R1
 241  6318 0200         LI R0, ROW2+5           ;Replace DSK# on screen
 241  631A 0045  
 242  631C 0420         BLWP @VSBW              
 242  631E 682C  
 243            
 244  6320 06A0         BL @DSROP
 244  6322 649A  
 245  6324 06A0         BL @DSRRD
 245  6326 64B8  
 246            
 247  6328 0200         LI R0, ROW2+20          ;Display disk name
 247  632A 0054  
 248  632C 0201         LI R1, BUFF1            ;Point to name in buffer
 248  632E 2720  
 249  6330 D0B1         MOVB *R1+, R2           ;Name length (Should be 10)
 250  6332 0982         SRL R2, 8
 251  6334 C142         MOV R2, R5
 252  6336 0420         BLWP @VMBW
 252  6338 6830  
 253                            
 254  633A 0200         LI R0, BUFF1+11         ;Point total sectors Float
 254  633C 272B  
 255  633E A005         A R5, R0                ;Add name length
 256  6340 06A0         BL @FL2INT              ;R9 = Integer on return
 256  6342 6464  
 257  6344 C0C9         MOV R9, R3              ;Save total Int
 258            
 259  6346 0200         LI R0, BUFF1+20         ;;Point available sectors Float
 259  6348 2734  
 260  634A A005         A R5, R0                ;Add name length
 261  634C 06A0         BL @FL2INT              ;
 261  634E 6464  
 262  6350 60C9         S R9, R3                ;R3 = Used sectors (total - available)
 263            
 264  6352 0200         LI R0, ROW3+12          ;Put AVAILABLE sectors on screen
 264  6354 006C  
 265  6356 06A0         BL @DSPINT
 265  6358 6482  
 266            
 267  635A C243         MOV R3, R9
 268  635C 0200         LI R0, ROW3+23          ;Put USED sectors on screen
 268  635E 0077  
 269  6360 06A0         BL @DSPINT
 269  6362 6482  
 270            ***
 271            LP16
 272  6364 0200         LI R0, ROW6
 272  6366 00C0  
 273  6368 0201         LI R1, >2000
 273  636A 2000  
 274  636C 0202         LI R2, 448
 274  636E 01C0  
 275  6370 0420 LP15    BLWP @VSBW
 275  6372 682C  
 276  6374 0580         INC R0          
 277  6376 0602         DEC R2
 278  6378 16FB         JNE LP15        
 279            
 280  637A 0204         LI R4, 14
 280  637C 000E  
 281  637E 0203         LI R3, ROW6+2
 281  6380 00C2  
 282            LP14
 283  6382 06A0         BL @DSRRD               ;Read record into BUFF1
 283  6384 64B8  
 284  6386 0201         LI R1, BUFF1
 284  6388 2720  
 285  638A D0B1         MOVB *R1+, R2           ;File name Char count
 286  638C 0982         SRL R2,8                ;
 287  638E 1343         JEQ LP13                ;All read
 288  6390 C142         MOV R2, R5              ;Save name length
 289  6392 C003         MOV R3, R0              ;Restore Row address
 290  6394 0420         BLWP @VMBW              ;Display file name
 290  6396 6830  
 291            *
 292  6398 0200         LI R0, BUFF1+11         ;Size offset from name
 292  639A 272B  
 293  639C A005         A R5, R0                ;Add name length
 294  639E 06A0         BL @FL2INT              ;R9 = Integer on return
 294  63A0 6464  
 295  63A2 C003         MOV R3, R0              ;Restore Row address
 296  63A4 0220         AI R0, 11               ;Screen address for Size
 296  63A6 000B  
 297  63A8 06A0         BL @DSPINT              ;Display size
 297  63AA 6482  
 298            *
 299  63AC 0200         LI R0, BUFF1+20         ;Record size
 299  63AE 2734  
 300  63B0 A005         A R5, R0                ;
 301  63B2 06A0         BL @FL2INT              ;
 301  63B4 6464  
 302  63B6 0289         CI R9, 0                ;Is type Program?
 302  63B8 0000  
 303  63BA 1305         JEQ JP11                ;
 304  63BC C003         MOV R3, R0              ;Restore Row address
 305  63BE 0220         AI R0, 22               ;
 305  63C0 0016  
 306  63C2 06A0         BL @DSPINT              ;
 306  63C4 6482  
 307            *
 308  63C6 0200 JP11    LI R0, BUFF1+2          ;Type
 308  63C8 2722  
 309  63CA A005         A R5, R0                ;Add name length 
 310  63CC D270         MOVB *R0+, R9           ;MSByte BF or 40, LSBYTE type 0-5
 311  63CE 06C9         SWPB R9
 312  63D0 D250         MOVB *R0, R9
 313  63D2 06C9         SWPB R9
 314  63D4 020A         LI R10, >2000           ;' '
 314  63D6 2000  
 315  63D8 9809         CB R9, @BF              ;Protected?
 315  63DA 6166  
 316  63DC 1604         JNE JP14                ;Not protected
 317  63DE 020A         LI R10, >5900           ;'Y'    
 317  63E0 5900  
 318  63E2 0549         INV R9                  ;0-4
 319  63E4 0589         INC R9                  ;1-5
 320            
 321  63E6 0249 JP14    ANDI R9,>00FF           ;
 321  63E8 00FF  
 322             
 323  63EA C003         MOV R3, R0              ;Restore Row address
 324  63EC 0220         AI R0, 16               ;Screen address for Type
 324  63EE 0010  
 325  63F0 0201         LI R1, TYPTBL           ;Point type table
 325  63F2 613E  
 326  63F4 0609         DEC R9                  ;1-5 to 0-4
 327  63F6 0A39         SLA R9, 3               ;Times 8
 328  63F8 A049         A R9, R1
 329  63FA 0202         LI R2, 7
 329  63FC 0007  
 330  63FE 0420         BLWP @VMBW
 330  6400 6830  
 331                    
 332  6402 C003         MOV R3, R0              ;Restore Row address
 333  6404 0220         AI R0, 27               ;Screen address for Protected
 333  6406 001B  
 334  6408 C04A         MOV R10, R1             ;Point type table
 335  640A 0420         BLWP @VSBW
 335  640C 682C  
 336            *       
 337  640E 0223         AI R3, 32               ;Next row       
 337  6410 0020  
 338  6412 0604         DEC R4
 339  6414 16B6         JNE LP14
 340            
 341  6416 0420 LP13    BLWP @KSCAN
 341  6418 6828  
 342  641A D020         MOVB @STATUS,R0
 342  641C 837C  
 343  641E 13FB         JEQ LP13
 344  6420 04C3         CLR R3
 345  6422 D0E0         MOVB @>8375, R3
 345  6424 8375  
 346  6426 0283         CI R3, >0F00            ;FCTN '9' BACK
 346  6428 0F00  
 347  642A 1318         JEQ JP08
 348  642C 0283         CI R3, >0500            ;FCTN '=' QUIT
 348  642E 0500  
 349  6430 1311         JEQ JP13
 350  6432 0283         CI R3, >3100            ;'1' Catalog DSK1
 350  6434 3100  
 351  6436 130A         JEQ JP12
 352  6438 0283         CI R3, >3200            ;'2' Catalog DSK2
 352  643A 3200  
 353  643C 1307         JEQ JP12  
 354  643E 0283         CI R3, >3300            ;'3' Catalog DSK3
 354  6440 3300  
 355  6442 1304         JEQ JP12
 356            
 357  6444 0282         CI R2, 0                ;Was last record read empty?
 357  6446 0000  
 358  6448 13E6         JEQ LP13                
 359  644A 108C         JMP LP16
 360            JP12    
 361  644C 06A0         BL @DSRCL
 361  644E 64D4  
 362  6450 0460         B @CATDSK               ;New drive
 362  6452 62E2  
 363            JP13
 364  6454 06A0         BL @DSRCL
 364  6456 64D4  
 365  6458 0420         BLWP @>0000             ;Reset
 365  645A 0000  
 366            JP08    
 367  645C 06A0         BL @DSRCL
 367  645E 64D4  
 368  6460 0460         B @MAIN                 ;Back
 368  6462 61F0  
 369            
 370            
 371            ********************************************************************************
 372            * Subroutines
 373            ********************************************************************************
 374            
 375            * Float to Integer
 376            * Entry: R0=pointer float Exit: R9=Int
 377            FL2INT
 378  6464 D270         MOVB *R0+, R9 
 379  6466 0249         ANDI R9,>0100   ;40 1 byte 41 2 bytes
 379  6468 0100  
 380  646A 1603         JNE JP10
 381  646C D270         MOVB *R0+, R9 
 382  646E 0989         SRL R9, 8
 383  6470 045B         B *R11
 384            
 385  6472 D070 JP10    MOVB *R0+, R1
 386  6474 0981         SRL R1, 8
 387  6476 3860         MPY @N100, R1
 387  6478 617C  
 388  647A D250         MOVB *R0, R9
 389  647C 0989         SRL R9, 8
 390  647E A242         A R2, R9
 391  6480 045B         B *R11
 392            
 393            * Display Integer
 394            * Entry: R0=Display position
 395            DSPINT
 396  6482 C30B         MOV R11, R12
 397  6484 0201         LI R1, BUFF1+40 ;R9=word R1=buffer 
 397  6486 2748  
 398  6488 06A0         BL @CV2ASC              ;Buffer=4 digit string
 398  648A 6670  
 399  648C 0201         LI R1, BUFF1+44 ;Point to leading 0s changed to space
 399  648E 274C  
 400  6490 0202         LI R2, 4
 400  6492 0004  
 401  6494 0420         BLWP @VMBW
 401  6496 6830  
 402  6498 045C         B *R12
 403            
 404            ****************************************
 405            *       Read from disk
 406            * Entry: MSB R3=drive #
 407            * Exit:
 408            * Registers used R0 R1 R2 R3
 409            ****************************************
 410            
 411            * R3 MSB=drive #
 412            DSROP
 413  649A 0200         LI R0,PAB
 413  649C 0F80  
 414  649E 0201         LI R1,PDATA
 414  64A0 6168  
 415  64A2 0202         LI R2,>20
 415  64A4 0020  
 416  64A6 0420         BLWP @VMBW      ;Move PAB data into PAB in VDP RAM
 416  64A8 6830  
 417            
 418  64AA D043         MOVB R3,R1      ;Get new drive number
 419  64AC 0200         LI R0,PAB+13    ;Drive number location in PAB
 419  64AE 0F8D  
 420  64B0 0420         BLWP @VSBW      ;Change drive number
 420  64B2 682C  
 421            
 422  64B4 04C1         CLR R1          ; Open OP
 423  64B6 1010         JMP DSR
 424            * Read 38 byte record into BUFF1
 425            DSRRD
 426  64B8 C30B         MOV R11, R12
 427  64BA 0201         LI R1, >0200    ;Read op-code
 427  64BC 0200  
 428  64BE 06A0         BL @DSR
 428  64C0 64D8  
 429            
 430  64C2 0200         LI R0,PABBUF    ;Move from VDP buffer to CPU buffer
 430  64C4 1000  
 431  64C6 0201         LI R1,BUFF1     ;
 431  64C8 2720  
 432  64CA 0202         LI R2,38        ;       
 432  64CC 0026  
 433  64CE 0420         BLWP @VMBR      ;
 433  64D0 6838  
 434  64D2 045C         B *R12
 435            *
 436            DSRCL
 437  64D4 0201         LI R1, >0100    ;Close op-code
 437  64D6 0100  
 438            *       JMP DSR         ;Fall thru
 439            * Call DSRLNK, R1=OP-code
 440            DSR
 441  64D8 0200         LI R0,PAB
 441  64DA 0F80  
 442  64DC 0420         BLWP @VSBW      ;Change I/O op-code
 442  64DE 682C  
 443            
 444  64E0 0200         LI R0,PAB+9     ;Get Pointer to name length
 444  64E2 0F89  
 445  64E4 C800         MOV R0,@PNTR    ;Store pointer to name length @>8356
 445  64E6 8356  
 446  64E8 0420         BLWP @DSRLNK    ;
 446  64EA 6840  
 447  64EC 0008         DATA 8
 448  64EE 045B         B    *R11
 449            
 450            ****************************************
 451            *       Change disk in drives
 452            *
 453            * Entry: DSK# in MSByte R3 (ASCII)
 454            * Exit: Disk changed in DSKxNUM and on Display
 455            ****************************************
 456            CHGDSK  
 457  64F0 0200         LI R0, ROW23+1          ;Prompt for disk number
 457  64F2 02E1  
 458  64F4 0201         LI R1, MSG5
 458  64F6 6076  
 459  64F8 0202         LI R2, _MSG5-MSG5       ;
 459  64FA 001E  
 460  64FC 0420         BLWP @VMBW
 460  64FE 6830  
 461            
 462  6500 0204         LI R4, KEYBUF
 462  6502 2720  
 463  6504 04C5         CLR R5                  ;# Chars in buffer
 464  6506 0202         LI R2, ROW23+24         ;Restore Cursor position
 464  6508 02F8  
 465  650A 0201 LP09    LI R1, >205F            ;Cursor Underscore & Space
 465  650C 205F  
 466  650E C002 LP11    MOV R2, R0
 467  6510 06C1         SWPB R1
 468  6512 0420         BLWP @VSBW
 468  6514 682C  
 469            
 470  6516 0200         LI R0, >0100
 470  6518 0100  
 471  651A 0600 LP12    DEC R0
 472  651C 16FE         JNE LP12
 473            
 474  651E 0420         BLWP @KSCAN
 474  6520 6828  
 475  6522 D020         MOVB @STATUS,R0
 475  6524 837C  
 476  6526 13F3         JEQ LP11
 477            
 478  6528 D060         MOVB @>8375, R1
 478  652A 8375  
 479  652C 0241         ANDI R1, >FF00
 479  652E FF00  
 480  6530 0281         CI R1, >0F00            ;FCTN 9 exit
 480  6532 0F00  
 481  6534 1357         JEQ EXCHG 
 482  6536 0281         CI R1, >0D00            ;enter
 482  6538 0D00  
 483  653A 131E         JEQ JP06
 484  653C 0281         CI R1, >0800            ;backspace
 484  653E 0800  
 485  6540 1608         JNE JP05
 486  6542 C002         MOV R2, R0              ;Clear old Char before we backspace cursor
 487  6544 0201         LI R1, >205F            ; "
 487  6546 205F  
 488  6548 0420         BLWP @VSBW              ; "
 488  654A 682C  
 489  654C 0602         DEC R2                  ;Cursor - 1
 490  654E 0604         DEC R4                  ;Buffer - 1
 491  6550 0605         DEC R5                  ;Count -1
 492  6552 0282 JP05    CI R2,ROW23+24          ;Check if cursor position moved back to far
 492  6554 02F8  
 493  6556 11CC         JLT CHGDSK
 494  6558 0282         CI R2,ROW23+26          ;Check if cursor position moved forward to far
 494  655A 02FA  
 495  655C 15D6         JGT LP09
 496            
 497  655E 0281         CI R1, >3000            ;'0'
 497  6560 3000  
 498  6562 11D3         JLT LP09
 499  6564 0281         CI R1, >3900            ;'9'
 499  6566 3900  
 500  6568 15D0         JGT LP09
 501            
 502  656A DD01         MOVB R1, *R4+           ;Save key read
 503  656C 0585         INC R5                  ;Count
 504  656E C002         MOV R2, R0              ;Move cursor position
 505  6570 0582         INC R2
 506  6572 0420         BLWP @VSBW
 506  6574 682C  
 507  6576 10C9         JMP LP09
 508            
 509  6578 0285 JP06    CI R5, 0                ;Nothing input
 509  657A 0000  
 510  657C 13B9         JEQ CHGDSK
 511            
 512            *******************
 513            ;Convert KEYBUF ASCII to VALUE
 514  657E 0200         LI R0, KEYBUF   ;Point to Last Char
 514  6580 2720  
 515  6582 A005         A R5, R0        ;Add number Digits
 516  6584 0600         DEC R0          ; "
 517            
 518  6586 D110         MOVB *R0, R4
 519  6588 0600         DEC R0
 520  658A 06C4         SWPB R4
 521  658C 0244         ANDI R4, >000F          ;Change from ASCII to value 1-9
 521  658E 000F  
 522  6590 0605         DEC R5
 523  6592 1314         JEQ JP07
 524               
 525  6594 D050         MOVB *R0, R1
 526  6596 0600         DEC R0
 527  6598 06C1         SWPB R1
 528  659A 0241         ANDI R1, >000F          ;Change from ASCII to value 1-9
 528  659C 000F  
 529            
 530  659E 3860         MPY @N10, R1
 530  65A0 617A  
 531  65A2 A102         A R2, R4
 532  65A4 0605         DEC R5
 533  65A6 130A         JEQ JP07
 534            
 535  65A8 D050         MOVB *R0, R1
 536  65AA 06C1         SWPB R1
 537  65AC 0241         ANDI R1, >000F          ;Change from ASCII to value 1-9
 537  65AE 000F  
 538  65B0 3860         MPY @N100, R1
 538  65B2 617C  
 539  65B4 A102         A R2, R4
 540                    
 541  65B6 0284         CI R4,255               ;Repeat input if disk greater than 255          
 541  65B8 00FF  
 542  65BA 159A         JGT CHGDSK      
 543  65BC 06C4 JP07    SWPB R4
 544            
 545            *********************
 546            ; R3 MSByte=Drive, R4 MSByte=Disk
 547  65BE 0993         SRL R3, 9               ;Move 3,4,7 in MSByte to 1-3 in LSByte
 548  65C0 D8C4         MOVB R4, @DSKNUM-1(R3)  ;Store disk # at DSKNUM 0-2
 548  65C2 27FC  
 549  65C4 06C3         SWPB R3
 550            
 551  65C6 020C         LI R12, >1100           ;Turn on DSR address space
 551  65C8 1100  
 552  65CA 1D00         SBO 0
 553            
 554  65CC 0200         LI R0, >7E00            ;Command >81 inverted
 554  65CE 7E00  
 555  65D0 D800         MOVB R0, @>5FF8         ;Send command
 555  65D2 5FF8  
 556            
 557  65D4 0543         INV R3                  ;Invert
 558  65D6 D803         MOVB R3, @>5FFE         ;Send Drive number
 558  65D8 5FFE  
 559  65DA 1000         NOP
 560  65DC 0544         INV R4
 561  65DE D804         MOVB R4, @>5FFE         ;Send Disk number
 561  65E0 5FFE  
 562  65E2 1E00         SBZ 0                   ;Turn off DSR address space
 563            
 564            **** Clear input prompt on display
 565            EXCHG
 566  65E4 C30B         MOV R11, R12
 567  65E6 06A0         BL @DSPCHG              ;'1-3=CHG DSK, FCTN 1-3=CAT DSK'
 567  65E8 6602  
 568  65EA 045C         B *R12                  ;Return
 569            ********************************************************************
 570            *** Clear Screen
 571            CLS
 572  65EC 04C0         CLR R0
 573  65EE 0201         LI R1, >2000            ;MSB=' '
 573  65F0 2000  
 574  65F2 0202         LI R2, 768
 574  65F4 0300  
 575            LP04
 576  65F6 0420         BLWP @VSBW              
 576  65F8 682C  
 577  65FA 0580         INC R0                  
 578  65FC 0602         DEC R2                  
 579  65FE 16FB         JNE LP04
 580  6600 045B         B *R11
 581            
 582            *** Display '1-3=CHG DSK, FCTN 1-3=CAT DSK'
 583  6602 0200 DSPCHG  LI R0, ROW23+1          ;
 583  6604 02E1  
 584  6606 0201         LI R1, MSG6
 584  6608 6094  
 585  660A 0202         LI R2, _MSG6-MSG6       ;
 585  660C 001E  
 586  660E 0420         BLWP @VMBW
 586  6610 6830  
 587  6612 045B         B *R11
 588            
 589            *** Display DSKx.xxx and Disk names
 590            DSPDSK
 591  6614 C30B         MOV R11, R12            ;Save return
 592  6616 0200         LI R0, ROW2+1           ;DSKX.
 592  6618 0041  
 593  661A 0201         LI R1, MSG4
 593  661C 6058  
 594  661E 0202         LI R2, _MSG4-MSG4       ;
 594  6620 001E  
 595  6622 0420         BLWP @VMBW
 595  6624 6830  
 596            
 597  6626 0204         LI R4, 3                ;3 drives
 597  6628 0003  
 598  662A 0205         LI R5, DSKNUM
 598  662C 27FD  
 599  662E 0200         LI R0, ROW2+6
 599  6630 0046  
 600            LP06                            
 601  6632 D255         MOVB *R5, R9            ;Get disk number for drive x
 602  6634 0989         SRL R9, 8               ;make byte a word
 603  6636 0201         LI R1, BUFF1
 603  6638 2720  
 604  663A 06A0         BL @CV2ASC
 604  663C 6670  
 605  663E 0201         LI R1, BUFF1+1  ;Skip 1st leading 0
 605  6640 2721  
 606  6642 0202         LI R2, 3                ;Only put 3 digits on screen            
 606  6644 0003  
 607  6646 0420         BLWP @VMBW              ;Put disk number on screen
 607  6648 6830  
 608                            
 609  664A D275         MOVB *R5+, R9           ;Get disk number for drive x
 610  664C 0989         SRL R9, 8               ;make byte a word
 611  664E 3A60         MPY @N11, R9            ;Point to name location in BUFF2
 611  6650 6180  
 612  6652 022A         AI R10, BUFF2           ; "
 612  6654 2800  
 613  6656 058A         INC R10                 ;Skip byte to 1st Char of name
 614  6658 C04A         MOV R10, R1
 615  665A 0220         AI R0, 27               ;Row below DSKX and back 5 columns
 615  665C 001B  
 616  665E 0202         LI R2, 10
 616  6660 000A  
 617  6662 0420         BLWP @VMBW              ;Put disk name on screen
 617  6664 6830  
 618  6666 0220         AI R0, -17              ;Back up to DSKX row advance 10 columns
 618  6668 FFEF  
 619  666A 0604         DEC R4
 620  666C 16E2         JNE LP06
 621                    
 622  666E 045C         B *R12
 623            
 624            *** Convert word to 4 digit ASCII
 625            *Entry: R9=word to convert, R1 pointing to 8 byte buffer
 626            *Exit: Buffer=1st 4 bytes string with leading 0s
 627            *Exit: Buffer=2nd 4 bytes string leading 0s removed
 628            CV2ASC
 629  6670 C289         MOV R9, R10
 630            
 631  6672 04C9         CLR R9
 632  6674 3E60         DIV @N1000, R9  ;R9 has integer of result, R10 has remainder
 632  6676 617E  
 633  6678 06C9         SWPB R9
 634  667A 0269         ORI R9, >3000
 634  667C 3000  
 635  667E DC49         MOVB R9, *R1+           ;Save integer
 636            
 637  6680 04C9         CLR R9
 638  6682 3E60         DIV @N100, R9   ;R9 has integer of result, R10 has remainder
 638  6684 617C  
 639  6686 06C9         SWPB R9
 640  6688 0269         ORI R9, >3000
 640  668A 3000  
 641  668C DC49         MOVB R9, *R1+           ;Save integer
 642                    
 643  668E 04C9         CLR R9                  ;R10 has remainder from previous division
 644  6690 3E60         DIV @N10, R9            ;R9 has integer of result, R10 has remainder    
 644  6692 617A  
 645  6694 06C9         SWPB R9
 646  6696 0269         ORI R9, >3000
 646  6698 3000  
 647  669A DC49         MOVB R9, *R1+           ;Save integer
 648            
 649  669C 06CA         SWPB R10
 650  669E 026A         ORI R10, >3000
 650  66A0 3000  
 651  66A2 DC4A         MOVB R10,*R1+           ;Save remainder
 652            
 653            *Copy string to buffer+4 & Change leading 0s to space
 654  66A4 C461         MOV @-4(R1),*R1         ;Copy 1st 4 bytes to 2nd 4 bytes
 654  66A6 FFFC  
 655  66A8 C861         MOV @-2(R1),@2(R1)      ; "
 655  66AA FFFE  
 655  66AC 0002  
 656  66AE 0209         LI R9, 3                ;Only 1st 3 0s
 656  66B0 0003  
 657            LP17    
 658  66B2 9460         CB @ASCII0, *R1
 658  66B4 6165  
 659  66B6 1604         JNE JP09                ;Leave at 1st non-zero digit
 660  66B8 DC60         MOVB @SPACE, *R1+
 660  66BA 605D  
 661  66BC 0609         DEC R9
 662  66BE 16F9         JNE LP17
 663            JP09
 664  66C0 045B         B *R11
 665            
 666            ********************************************************************************
 667            * E/A Utilities
 668            ********************************************************************************            
 669  66C2 02E0 _KSCAN  LWPI >83E0                
 669  66C4 83E0  
 670  66C6 C80B         MOV  R11,@EAREG+22           ;save to old r11
 670  66C8 20AA  
 671  66CA 06A0         BL   @>000E
 671  66CC 000E  
 672  66CE 02E0         LWPI EAREG
 672  66D0 2094  
 673  66D2 C80B         MOV  R11,@>83F6              ;restore gpl r11
 673  66D4 83F6  
 674  66D6 0380         RTWP
 675             
 676            *Register 0: Address in VDP RAM.
 677            *Register 1: Most-significant byte contains the value to be written.                       
 678  66D8 06A0 _VSBW   BL   @VWR                 
 678  66DA 671E  
 679  66DC D82D         MOVB @>0002(R13),@>8C00
 679  66DE 0002  
 679  66E0 8C00  
 680  66E2 0380         RTWP
 681            
 682            *Register 0: Starting address of the buffer in VDP RAM.
 683            *Register 1: Starting address of the buffer in RAM.
 684            *Register 2: The number of bytes to be written.                                  
 685  66E4 06A0 _VMBW   BL   @VWR                 
 685  66E6 671E  
 686  66E8 D831 LP80    MOVB *R1+,@>8C00
 686  66EA 8C00  
 687  66EC 0602         DEC  2
 688  66EE 16FC         JNE  LP80                  
 689  66F0 0380         RTWP
 690            
 691            *Register 0: Address in VDP RAM.
 692            *Register 1: Value is placed in the most-significant byte.                               
 693  66F2 06A0 _VSBR   BL   @VRD                 
 693  66F4 6724  
 694  66F6 DB60         MOVB @>8800,@>0002(R13)
 694  66F8 8800  
 694  66FA 0002  
 695  66FC 0380         RTWP
 696            
 697            *Register 0: Starting address of the buffer in VPP RAM.
 698            *Register 1: Starting address of the buffer in RAM.
 699            *Register 2: The number of bytes to be read.                                 
 700  66FE 06A0 _VMBR  BL   @VRD                 
 700  6700 6724  
 701  6702 DC60 LP81    MOVB @>8800,*R1+
 701  6704 8800  
 702  6706 0602         DEC  2
 703  6708 16FC         JNE  lp81                  
 704  670A 0380         RTWP
 705            
 706            *Register 0: Least-significant byte contains the value to be written.
 707            *Most-significant byte indicates the VDP Register to be written to.   
 708  670C C05D _VWTR   MOV  *R13,R1                  
 709  670E D82D         MOVB @>0001(R13),@>8C02
 709  6710 0001  
 709  6712 8C02  
 710  6714 0261         ORI  R1,>8000
 710  6716 8000  
 711  6718 D801         MOVB R1,@>8C02
 711  671A 8C02  
 712  671C 0380         RTWP
 713            
 714  671E 0201 VWR     LI   R1,>4000                   ;vdp write
 714  6720 4000  
 715  6722 1001         JMP  jp82                  
 716  6724 04C1 VRD     CLR  R1                         ;vdp read
 717  6726 C09D JP82    MOV  *R13,R2                  
 718  6728 D820         MOVB @EAREG+5,@>8C02
 718  672A 2099  
 718  672C 8C02  
 719  672E E081         SOC  R1,R2
 720  6730 D802         MOVB R2,@>8C02
 720  6732 8C02  
 721  6734 C06D         MOV  @>0002(R13),R1           fetch old r1,r2
 721  6736 0002  
 722  6738 C0AD         MOV  @>0004(R13),R2
 722  673A 0004  
 723  673C 045B         B    *R11
 724            *
 725            *-------------------------------------
 726            * DSRLNK Call DSR or subprogram
 727            *-------------------------------------
 728  0000 2032 SAVCRU  EQU >2032
 729  0000 2034 SAVENT  EQU >2034
 730  0000 2036 SAVLEN  EQU >2036
 731  0000 2038 SAVPAB  EQU >2038
 732  0000 203A SAVVER  EQU >203A
 733  0000 208C NAMBUF  EQU >208C
 734  673E 2E   DOT     TEXT '.'              ;Used by DSRLNK
 735  673F 20   EQBIT   BYTE >20              ; "
 736  6740 AA   HEADID  BYTE >AA              ;Could use >6000
 737  6741 0000         EVEN
 738            _DSRLN
 739  6742 C17E        MOV  *R14+,R5          ;get data word: >0008 = DSR, >000A = subprogram
 740  6744 53E0        SZCB @EQBIT,R15        ;clear Eq bit
 740  6746 673F  
 741  6748 C020        MOV  @>8356,0          ;get name ptr
 741  674A 8356  
 742  674C C240        MOV  R0,R9
 743  674E 0229        AI   R9,-8             ;point to status/error byte in PAB
 743  6750 FFF8  
 744  6752 0420        BLWP @VSBR             ;VSBR: read size
 744  6754 6834  
 745  6756 D0C1        MOVB R1,R3             ;name size
 746  6758 0983        SRL  R3,8              ;make it a word
 747  675A 0704        SETO R4                ;character counter
 748  675C 0202        LI   R2,NAMBUF         ;name buffer
 748  675E 208C  
 749            
 750  6760 0580 LP90   INC  R0
 751  6762 0584        INC  R4
 752  6764 80C4        C    R4,R3             ;whole name done?
 753  6766 1306        JEQ  JP90              ;yes
 754  6768 0420        BLWP @VSBR             ;no: read a char with VSBR
 754  676A 6834  
 755  676C DC81        MOVB R1,*R2+           ;save it on buffer
 756  676E 9801        CB   R1,@DOT           ;is it . ?
 756  6770 673E  
 757  6772 16F6        JNE  LP90              ;no: next char
 758            
 759  6774 C104 JP90   MOV  R4,R4             ;yes: did we find any char before the dot?
 760  6776 1352        JEQ  JP95              ;empty name: error 0
 761  6778 0284        CI   R4,>0007          ;check name size
 761  677A 0007  
 762  677C 154F        JGT  JP95              ;8 char or more: error 0
 763  677E 04E0        CLR  @>83D0            ;buffer for CRU address
 763  6780 83D0  
 764  6782 C804        MOV  R4,@>8354         ;save name size
 764  6784 8354  
 765  6786 C804        MOV  R4,@SAVLEN        ;again for internal use
 765  6788 2036  
 766  678A 0584        INC  R4
 767  678C A804        A    R4,@>8356         ;point at end-of-name
 767  678E 8356  
 768  6790 C820        MOV  @>8356,@SAVPAB    ;save for recall          
 768  6792 8356  
 768  6794 2038  
 769  6796 02E0        LWPI >83E0             ;GPL workspace
 769  6798 83E0  
 770  679A 04C1        CLR  R1                ;call counter
 771  679C 020C        LI   R12,>0F00         ;CRU
 771  679E 0F00  
 772            
 773  67A0 C30C LP91  MOV  R12,R12            ;first CRU?
 774  67A2 1301        JEQ  JP91              ;yes: skip
 775  67A4 1E00        SBZ  R0                ;no: turn previous card off
 776            
 777  67A6 022C JP91  AI   R12,>0100          ;next card
 777  67A8 0100  
 778  67AA 04E0        CLR  @>83D0            ;reset buffer
 778  67AC 83D0  
 779  67AE 028C        CI   R12,>2000         ;last card done?
 779  67B0 2000  
 780  67B2 1332        JEQ  JP94              ;yes: error 0
 781  67B4 C80C        MOV  R12,@>83D0        ;save current CRU
 781  67B6 83D0  
 782  67B8 1D00        SBO  R0                ;turn card on (if any)
 783  67BA 0202        LI   R2,>4000
 783  67BC 4000  
 784  67BE 9812        CB   *R2,@HEADID       ;check if valid header (>AA)
 784  67C0 6740  
 785  67C2 16EE        JNE  LP91              ;no: next card
 786  67C4 A0A0        A    @DSRREG+10,R2    ;yes: get first link (sub or DSR)
 786  67C6 20A4  
 787  67C8 1003        JMP  JP92
 788            
 789  67CA C0A0 LP92  MOV  @>83D2,R2          ;address of 'next link' word
 789  67CC 83D2  
 790  67CE 1D00        SBO  R0                ;make sure card is on
 791            
 792  67D0 C092 JP92  MOV  *R2,R2             ;next link
 793  67D2 13E6        JEQ  LP91              ;no more: next card
 794  67D4 C802        MOV  R2,@>83D2         ;save address (ptr to next link)
 794  67D6 83D2  
 795  67D8 05C2        INCT R2
 796  67DA C272        MOV  *R2+,R9           ;program address
 797  67DC D160        MOVB @>8355,R5         ;name size
 797  67DE 8355  
 798  67E0 1309        JEQ  JP93              ;no name: execute
 799  67E2 9C85        CB   R5,*R2+           ;same size?
 800  67E4 16F2        JNE  LP92              ;no: next link
 801  67E6 0985        SRL  R5,8              ;yes: make it a word
 802  67E8 0206        LI   R6,NAMBUF         ;name buffer
 802  67EA 208C  
 803            
 804  67EC 9CB6 LP93  CB   *R6+,*R2+          ;check name
 805  67EE 16ED        JNE  LP92              ;mismatch: next link
 806  67F0 0605        DEC  R5
 807  67F2 16FC        JNE  LP93              ;next char
 808            
 809  67F4 0581 JP93  INC  R1                 ;occurences counter
 810  67F6 C801        MOV  R1,@SAVVER        ;save it for recall
 810  67F8 203A  
 811  67FA C809        MOV  R9,@SAVENT        ;save program address
 811  67FC 2034  
 812  67FE C80C        MOV  R12,@SAVCRU       ;save CRU
 812  6800 2032  
 813  6802 0699        BL   *R9               ;call DSR/subprogram
 814  6804 10E2        JMP  LP92              ;keep scanning
 815  6806 1E00        SBZ  R0                ;done: turn card off
 816  6808 02E0        LWPI DSRREG           ;DSRLNK workspace
 816  680A 209A  
 817  680C C009        MOV  R9,R0              ;status/error byte in PAB
 818  680E 0420        BLWP @VSBR             ;VSBR: read it
 818  6810 6834  
 819  6812 09D1        SRL  R1,13             ;keep only error bits
 820  6814 1604        JNE  JP96              ;error
 821  6816 0380        RTWP                   ;no error: return to caller
 822             
 823  6818 02E0 JP94  LWPI DSRREG            ;back to DSRLNK workspace
 823  681A 209A  
 824  681C 04C1 JP95  CLR  R1                 ;error #0
 825  681E 06C1 JP96  SWPB R1
 826  6820 D741        MOVB R1,*R13           ;pass error code in caller's R0
 827  6822 F3E0        SOCB @EQBIT,R15        ;set eq bit
 827  6824 673F  
 828  6826 0380        RTWP                   ;return to caller
 829            
 830            *********************************
 831  6828 2094 KSCAN   DATA EAREG,_KSCAN
 831  682A 66C2  
 832  682C 2094 VSBW    DATA EAREG,_VSBW
 832  682E 66D8  
 833  6830 2094 VMBW    DATA EAREG,_VMBW
 833  6832 66E4  
 834  6834 2094 VSBR    DATA EAREG,_VSBR
 834  6836 66F2  
 835  6838 2094 VMBR    DATA EAREG,_VMBR
 835  683A 66FE  
 836  683C 2094 VWTR    DATA EAREG,_VWTR
 836  683E 670C  
 837  6840 209A DSRLNK  DATA DSRREG,_DSRLN
 837  6842 6742  
 838            
 839  0000 0000 ROW0    EQU >0000
 840  0000 0020 ROW1    EQU >0020
 841  0000 0040 ROW2    EQU >0040
 842  0000 0060 ROW3    EQU >0060
 843  0000 0080 ROW4    EQU >0080
 844  0000 00A0 ROW5    EQU >00A0
 845  0000 00C0 ROW6    EQU >00C0
 846  0000 00E0 ROW7    EQU >00E0
 847  0000 0100 ROW8    EQU >0100
 848  0000 0120 ROW9    EQU >0120
 849  0000 0140 ROW10   EQU >0140
 850  0000 0160 ROW11   EQU >0160
 851  0000 0180 ROW12   EQU >0180
 852  0000 01A0 ROW13   EQU >01A0
 853  0000 01C0 ROW14   EQU >01C0
 854  0000 01E0 ROW15   EQU >01E0
 855  0000 0200 ROW16   EQU >0200
 856  0000 0220 ROW17   EQU >0220
 857  0000 0240 ROW18   EQU >0240
 858  0000 0260 ROW19   EQU >0260
 859  0000 0280 ROW20   EQU >0280
 860  0000 02A0 ROW21   EQU >02A0
 861  0000 02C0 ROW22   EQU >02C0
 862  0000 02E0 ROW23   EQU >02E0
 863  6844 0000  END                         
 863            


 Assembly Complete - Errors: 0,  Warnings: 0


 ------ Symbol Listing ------

 _DSRLN ABS:6742 _DSRLN
 _KSCAN ABS:66C2 _KSCAN
 _MSG1  ABS:6028 _MSG1
 _MSG2  ABS:6046 _MSG2
 _MSG3  ABS:6058 _MSG3
 _MSG4  ABS:6076 _MSG4
 _MSG5  ABS:6094 _MSG5
 _MSG6  ABS:60B2 _MSG6
 _MSG7  ABS:60BE _MSG7
 _MSG8  ABS:613E _MSG8
 _VMBR  ABS:66FE _VMBR
 _VMBW  ABS:66E4 _VMBW
 _VSBR  ABS:66F2 _VSBR
 _VSBW  ABS:66D8 _VSBW
 _VWTR  ABS:670C _VWTR
 ASCII0 ABS:6165 ASCII0
 BF     ABS:6166 BF
 BUFF1  ABS:2720 BUFF1
 BUFF2  ABS:2800 BUFF2
 CATDSK ABS:62E2 CATDSK
 CHGDSK ABS:64F0 CHGDSK
 CLOSE  ABS:6179 CLOSE
 CLS    ABS:65EC CLS
 CV2ASC ABS:6670 CV2ASC
 DOT    ABS:673E DOT
 DSKNUM ABS:27FD DSKNUM
 DSPCHG ABS:6602 DSPCHG
 DSPDSK ABS:6614 DSPDSK
 DSPINT ABS:6482 DSPINT
 DSR    ABS:64D8 DSR
 DSRCL  ABS:64D4 DSRCL
 DSRLNK ABS:6840 DSRLNK
 DSROP  ABS:649A DSROP
 DSRRD  ABS:64B8 DSRRD
 DSRREG ABS:209A DSRREG
 EAREG  ABS:2094 EAREG
 EQBIT  ABS:673F EQBIT
 EXCHG  ABS:65E4 EXCHG
 FL2INT ABS:6464 FL2INT
 HEADID ABS:6740 HEADID
 JP01   ABS:622A JP01
 JP02   ABS:6234 JP02
 JP03   ABS:6246 JP03
 JP04   ABS:62D0 JP04
 JP05   ABS:6552 JP05
 JP06   ABS:6578 JP06
 JP07   ABS:65BC JP07
 JP08   ABS:645C JP08
 JP09   ABS:66C0 JP09
 JP10   ABS:6472 JP10
 JP11   ABS:63C6 JP11
 JP12   ABS:644C JP12
 JP13   ABS:6454 JP13
 JP14   ABS:63E6 JP14
 JP82   ABS:6726 JP82
 JP90   ABS:6774 JP90
 JP91   ABS:67A6 JP91
 JP92   ABS:67D0 JP92
 JP93   ABS:67F4 JP93
 JP94   ABS:6818 JP94
 JP95   ABS:681C JP95
 JP96   ABS:681E JP96
 KEYBUF ABS:2720 KEYBUF
 KSCAN  ABS:6828 KSCAN
 LP01   ABS:61CE LP01
 LP02   ABS:623C LP02
 LP03   ABS:6220 LP03
 LP04   ABS:65F6 LP04
 LP05   ABS:61B8 LP05
 LP06   ABS:6632 LP06
 LP08   ABS:61DE LP08
 LP09   ABS:650A LP09
 LP10   ABS:627A LP10
 LP11   ABS:650E LP11
 LP12   ABS:651A LP12
 LP13   ABS:6416 LP13
 LP14   ABS:6382 LP14
 LP15   ABS:6370 LP15
 LP16   ABS:6364 LP16
 LP17   ABS:66B2 LP17
 LP80   ABS:66E8 LP80
 LP81   ABS:6702 LP81
 LP90   ABS:6760 LP90
 LP91   ABS:67A0 LP91
 LP92   ABS:67CA LP92
 LP93   ABS:67EC LP93
 MAIN   ABS:61F0 MAIN
 MSG1   ABS:6015 MSG1
 MSG2   ABS:6028 MSG2
 MSG3   ABS:6046 MSG3
 MSG4   ABS:6058 MSG4
 MSG5   ABS:6076 MSG5
 MSG6   ABS:6094 MSG6
 MSG7   ABS:60B2 MSG7
 MSG8   ABS:60BE MSG8
 MYREG  ABS:2700 MYREG
 N10    ABS:617A N10
 N100   ABS:617C N100
 N1000  ABS:617E N1000
 N11    ABS:6180 N11
 NAMBUF ABS:208C NAMBUF
 PAB    ABS:0F80 PAB
 PABBUF ABS:1000 PABBUF
 PDATA  ABS:6168 PDATA
 PNTR   ABS:8356 PNTR
 PRGM   ABS:6010 PRGM
 QUIT   ABS:62DE QUIT
 R0     ABS:0000 R0
 R1     ABS:0001 R1
 R10    ABS:000A R10
 R11    ABS:000B R11
 R12    ABS:000C R12
 R13    ABS:000D R13
 R14    ABS:000E R14
 R15    ABS:000F R15
 R2     ABS:0002 R2
 R3     ABS:0003 R3
 R4     ABS:0004 R4
 R5     ABS:0005 R5
 R6     ABS:0006 R6
 R7     ABS:0007 R7
 R8     ABS:0008 R8
 R9     ABS:0009 R9
 READ   ABS:6178 READ
 ROW0   ABS:0000 ROW0
 ROW1   ABS:0020 ROW1
 ROW10  ABS:0140 ROW10
 ROW11  ABS:0160 ROW11
 ROW12  ABS:0180 ROW12
 ROW13  ABS:01A0 ROW13
 ROW14  ABS:01C0 ROW14
 ROW15  ABS:01E0 ROW15
 ROW16  ABS:0200 ROW16
 ROW17  ABS:0220 ROW17
 ROW18  ABS:0240 ROW18
 ROW19  ABS:0260 ROW19
 ROW2   ABS:0040 ROW2
 ROW20  ABS:0280 ROW20
 ROW21  ABS:02A0 ROW21
 ROW22  ABS:02C0 ROW22
 ROW23  ABS:02E0 ROW23
 ROW3   ABS:0060 ROW3
 ROW4   ABS:0080 ROW4
 ROW5   ABS:00A0 ROW5
 ROW6   ABS:00C0 ROW6
 ROW7   ABS:00E0 ROW7
 ROW8   ABS:0100 ROW8
 ROW9   ABS:0120 ROW9
 SAVCRU ABS:2032 SAVCRU
 SAVENT ABS:2034 SAVENT
 SAVLEN ABS:2036 SAVLEN
 SAVPAB ABS:2038 SAVPAB
 SAVVER ABS:203A SAVVER
 SPACE  ABS:605D SPACE
 START  ABS:6182 START
 STATUS ABS:837C STATUS
 TYPTBL ABS:613E TYPTBL
 VMBR   ABS:6838 VMBR
 VMBW   ABS:6830 VMBW
 VRD    ABS:6724 VRD
 VSBR   ABS:6834 VSBR
 VSBW   ABS:682C VSBW
 VWR    ABS:671E VWR
 VWTR   ABS:683C VWTR
