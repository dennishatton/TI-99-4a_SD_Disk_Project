EAREG	EQU >2094	;EA Registers
DSRREG EQU >209A
MYREG	EQU >2700	;My Registers
BUFF1	EQU >2720	;223 bytes
DSKNUM	EQU >27FD	;Saved disk number for DSK1-3 (3 bytes)
BUFF2	EQU >2800	;>1800(6144) bytes
KEYBUF EQU BUFF1
*
	AORG >6000	;Standard Header (ROM can have programs)
	BYTE >AA	;6000	Identification
	BYTE >01	;6001	Version number
	BYTE 0		;6002	Number of programs
	BYTE 0		;6003	Reserved
	DATA 0		;6004	Power up routine header
	DATA PRGM	;6006	User program header
	DATA 0		;6008	DSR header
	DATA 0		;600A	Subroutine link header
	DATA 0		;600C	Address of interrupt link
	DATA 0		;600E	Address of BASIC subroutine libraries
***
PRGM	DATA >0000
	DATA START	
	BYTE _MSG1-MSG1
MSG1	TEXT 'TI DISKS ON SD CARD'
_MSG1
*
MSG2	TEXT 'PRESS UP DN/SPACE BACK QUIT   '
_MSG2
MSG3	TEXT 'READING DISK NAMES'           '
_MSG3
MSG4	TEXT 'DSK1.     DSK2.     DSK3.     '
_MSG4
MSG5	TEXT 'NEW DISK NUMBER (0-255)?      '
_MSG5
MSG6	TEXT '1-3=CAT DSK, FCTN 1-3=MNT DSK '
_MSG6
MSG7	TEXT 'CATALOG DISK'
_MSG7
MSG8	TEXT '  DSK1 -  DISKNAME=             '
	TEXT '  AVAILABLE=      USED=         '
	TEXT '   FILENAME  SIZE    TYPE    P  '
	TEXT '  ---------- ---- ---------- -  '
_MSG8
TYPTBL	TEXT 'DIS/FIX DIS/VAR INT/FIX INT/VAR PROGRAM'
ASCII0	TEXT '0'
BF	BYTE >BF
SPACE	EQU MSG4+5
;DOT	EQU MSG4+4	;Defined in DSRLNK
*********************
	EVEN
PABBUF	EQU >1000
PAB	EQU >F80
STATUS	EQU >837C
PNTR	EQU >8356
PDATA	DATA >000D,PABBUF,>0000,>0000,>0005
	TEXT 'DSK1.'
	EVEN
READ	BYTE >02
CLOSE	BYTE >01
*********************
	EVEN
N10	DATA 10
N100	DATA 100
N1000	DATA 1000
N11	DATA 11

START	LWPI MYREG		
	CLR @>8374		;Set scan for complete keyboard

****************************************
*** Get disk names
****************************************
	LI R12, >1100		;Disk CRU address
	SBO 0			;Turn disk card on
	LI R0, >7D00		;Command >82 inverted
	MOVB R0, @>5FF8		;Send command

* Print 'READING DISK NAMES'
	LI R0, ROW8+1		;
	LI R1, MSG3		
	LI R2, _MSG3-MSG3	;
	BLWP @VMBW
	AI R0, _MSG3-MSG3	;
	MOVB @DOT, R1		;'.'

	LI R5, DSKNUM
	LI R4, 3		;3 drives
LP05
	MOVB @>5FFE, R6		;Get DSKx disk number
	INV R6
	MOVB R6, *R5+		;Store in BUFF1
	DEC R4			;Next
	JNE LP05		; "

	LI R5, BUFF2		
	LI R2, 256		;256 disks
	CLR R3			;Disk number 0

LP01	
	BLWP @VSBW		;Put '.' on screen
	INC R0			; "	
	MOVB R3,*R5+		;Disk number in buffer
	AI R3,>0100		;Next disk number
	
	LI R4, 10		;10 Chars per disk name
 	;LI R6,>3000 *remove
LP08	
	MOVB @>5FFE, R6	;Get Char
	INV R6			;Invert
 	;AI R6,>0100 *remove
	MOVB R6, *R5+		;Store Char in buffer
	DEC R4			;Next Char
	JNE LP08		; "

	DEC R2			;Next disk
	JNE LP01		; "
 
	SBZ 0			;Turn disk card off
****************************************
*** Put header and footer on screen
****************************************
MAIN
	BL @CLS			;Clear screen

	LI R0, ROW0+6		;Header
	LI R1, MSG1
	LI R2, _MSG1-MSG1	;
	BLWP @VMBW

	BL @DSPDSK		;Drives disk names
	BL @DSPCHG		;Display Press 1-3
 
	LI R0, ROW22+1		;Footer
	LI R1, MSG2
	LI R2, _MSG2-MSG2	;
	BLWP @VMBW
****************************************
*** Put names on screen
****************************************
	LI R1, BUFF2

LP03	CI R1, BUFF2+2815	;(256*11)-1
	JLE JP01
	AI R1, -352 		;(32*11)
JP01	CI R1, BUFF2
	JHE JP02
	AI R1, 352		;(32*11)
JP02
	
	LI R3, 32		;16 rows * 2
	LI R0, ROW5+1		;Start row position
LP02	CI R0, ROW21+1
	 JNE JP03
	 LI R0, ROW5+17
JP03	 MOVB *R1+, R9
	 SRL R9, 8
	 MOV R1, R5		;Save R1 BUFF2 pointer
	 LI R1, BUFF1
	 BL @CV2ASC

	 LI R1, BUFF1+1	;Display disk number
	 LI R2, 3			
	 BLWP @VMBW
	 AI R0, 4	 	;Point to name field

	 MOV R5, R1		;Restore R1 BUFF2 pointer
	 LI R2, 10		;Display 10 characters
	 BLWP @VMBW
	 AI R0, 28	 	;Finish row
	 AI R1, 10		;Next Disk
	 DEC R3
	JNE LP02

****************************************
*** Get input from keyboard
****************************************
LP10	BLWP @KSCAN
	MOVB @STATUS,R0
	JEQ LP10

	CLR R3
	MOVB @>8375, R3
	CI R3, >0500		;FCTN '=' QUIT
	JEQ QUIT

	CI R3, >3100		;'1' Catalog DSK1
	JEQ CATDSK
	CI R3, >3200		;'2' Catalog DSK2
	JEQ CATDSK  
	CI R3, >3300		;'3' Catalog DSK3
	JEQ CATDSK
  
	CI R3, >0300		;FCTN '1' Change DSK1	
	JEQ JP04
	CI R3, >0400		;FCTN '2' Change DSK2	
	JEQ JP04
	CI R3, >0700		;FCTN '3' Change DSK3
	JEQ JP04

	ANDI R3, >DF00		;If lowercase, make uppercase
	CI R3, >5800		;'X'	PGDN
	JEQ LP03
	CI R3, >0000		;' '	PGDN	
	JEQ LP03
	CI R3, >4500		;'E'	PGUP	
	JNE LP10		;Loop back to kscan
	AI R1, -704		;(64*11) Move 2 pages back 32 disk 
	JMP LP03			

JP04   	MOV R1, R8		;Save buffer position
 	BL @CHGDSK		;Call change disk
 	BL @DSPDSK		;Call display drives
 	MOV R8, R1		;Restore buffer position
	JMP LP10		;Loop back to kscan

QUIT	BLWP @>0000		;reset

****************************************
*	Catalog disk
* Entry: MSB R3=drive #
****************************************
CATDSK
	BL @CLS

	LI R0, ROW0+10		;Catalog
	LI R1, MSG7
	LI R2, _MSG7-MSG7	;
	BLWP @VMBW

	LI R0, ROW22+1		;Footer
	LI R1, MSG2
	LI R2, _MSG2-MSG2	;
	BLWP @VMBW

	LI R0, ROW2		;Disk info at top
	LI R1, MSG8
	LI R2, _MSG8-MSG8	;
	BLWP @VMBW

	MOVB R3, R1
	LI R0, ROW2+5		;Replace DSK# on screen
	BLWP @VSBW		

	BL @DSROP
	BL @DSRRD

	LI R0, ROW2+20		;Display disk name
	LI R1, BUFF1		;Point to name in buffer
	MOVB *R1+, R2		;Name length (Should be 10)
	SRL R2, 8
	MOV R2, R5
	BLWP @VMBW
		
	LI R0, BUFF1+11		;Point total sectors Float
	A R5, R0		;Add name length
	BL @FL2INT		;R9 = Integer on return
	MOV R9, R3		;Save total Int

 	LI R0, BUFF1+20		;;Point available sectors Float
	A R5, R0		;Add name length
	BL @FL2INT		;
	S R9, R3		;R3 = Used sectors (total - available)

	LI R0, ROW3+12		;Put AVAILABLE sectors on screen
	BL @DSPINT

	MOV R3, R9
	LI R0, ROW3+23		;Put USED sectors on screen
	BL @DSPINT
***
LP16
	LI R0, ROW6
	LI R1, >2000
	LI R2, 448
LP15	BLWP @VSBW
	INC R0		
	DEC R2
	JNE LP15	

	LI R4, 14
	LI R3, ROW6+2
LP14
	BL @DSRRD		;Read record into BUFF1
	LI R1, BUFF1
	MOVB *R1+, R2		;File name Char count
	SRL R2,8		;
	JEQ LP13		;All read
	MOV R2, R5		;Save name length
 	MOV R3, R0		;Restore Row address
	BLWP @VMBW		;Display file name
*
	LI R0, BUFF1+11		;Size offset from name
	A R5, R0		;Add name length
	BL @FL2INT		;R9 = Integer on return
	MOV R3, R0		;Restore Row address
	AI R0, 11		;Screen address for Size
	BL @DSPINT		;Display size
*
 	LI R0, BUFF1+20		;Record size
	A R5, R0		;
	BL @FL2INT		;
	CI R9, 0		;Is type Program?
	JEQ JP11		;
	MOV R3, R0		;Restore Row address
	AI R0, 22		;
	BL @DSPINT		;
*
JP11	LI R0, BUFF1+2		;Type
	A R5, R0		;Add name length 
	MOVB *R0+, R9		;MSByte BF or 40, LSBYTE type 0-5
	SWPB R9
	MOVB *R0, R9
	SWPB R9
	LI R10, >2000		;' '
	CB R9, @BF		;Protected?
	JNE JP14		;Not protected
	LI R10, >5900		;'Y'	
	INV R9			;0-4
	INC R9			;1-5

JP14	ANDI R9,>00FF		;
 
	MOV R3, R0		;Restore Row address
	AI R0, 16		;Screen address for Type
	LI R1, TYPTBL		;Point type table
	DEC R9			;1-5 to 0-4
	SLA R9, 3		;Times 8
	A R9, R1
	LI R2, 7
	BLWP @VMBW
	
	MOV R3, R0		;Restore Row address
	AI R0, 27		;Screen address for Protected
	MOV R10, R1		;Point type table
	BLWP @VSBW
*	
	AI R3, 32		;Next row	
	DEC R4
	JNE LP14

LP13	BLWP @KSCAN
	MOVB @STATUS,R0
	JEQ LP13
	CLR R3
	MOVB @>8375, R3
	CI R3, >0F00		;FCTN '9' BACK
	JEQ JP08
	CI R3, >0500		;FCTN '=' QUIT
	JEQ JP13
	CI R3, >3100		;'1' Catalog DSK1
	JEQ JP12
	CI R3, >3200		;'2' Catalog DSK2
	JEQ JP12  
	CI R3, >3300		;'3' Catalog DSK3
	JEQ JP12

	CI R2, 0		;Was last record read empty?
	JEQ LP13		
	JMP LP16
JP12	
	BL @DSRCL
	B @CATDSK		;New drive
JP13
	BL @DSRCL
	BLWP @>0000		;Reset
JP08	
	BL @DSRCL
	B @MAIN			;Back


********************************************************************************
* Subroutines
********************************************************************************

* Float to Integer
* Entry: R0=pointer float Exit: R9=Int
FL2INT
	MOVB *R0+, R9 
	ANDI R9,>0100	;40 1 byte 41 2 bytes
	JNE JP10
	MOVB *R0+, R9 
	SRL R9, 8
	B *R11

JP10	MOVB *R0+, R1
	SRL R1, 8
	MPY @N100, R1
	MOVB *R0, R9
	SRL R9, 8
	A R2, R9
	B *R11

* Display Integer
* Entry: R0=Display position
DSPINT
	MOV R11, R12
	LI R1, BUFF1+40	;R9=word R1=buffer 
	BL @CV2ASC		;Buffer=4 digit string
	LI R1, BUFF1+44	;Point to leading 0s changed to space
	LI R2, 4
	BLWP @VMBW
	B *R12

****************************************
*	Read from disk
* Entry: MSB R3=drive #
* Exit:
* Registers used R0 R1 R2 R3
****************************************

* R3 MSB=drive #
DSROP
	LI R0,PAB
	LI R1,PDATA
	LI R2,>20
	BLWP @VMBW	;Move PAB data into PAB in VDP RAM

	MOVB R3,R1	;Get new drive number
	LI R0,PAB+13	;Drive number location in PAB
	BLWP @VSBW	;Change drive number

	CLR R1		; Open OP
	JMP DSR
* Read 38 byte record into BUFF1
DSRRD
	MOV R11, R12
	LI R1, >0200	;Read op-code
	BL @DSR

	LI R0,PABBUF	;Move from VDP buffer to CPU buffer
	LI R1,BUFF1	;
	LI R2,38	;	
	BLWP @VMBR	;
	B *R12
*
DSRCL
	LI R1, >0100	;Close op-code
*	JMP DSR		;Fall thru
* Call DSRLNK, R1=OP-code
DSR
	LI R0,PAB
	BLWP @VSBW	;Change I/O op-code

	LI R0,PAB+9	;Get Pointer to name length
	MOV R0,@PNTR	;Store pointer to name length @>8356
	BLWP @DSRLNK	;
	DATA 8
       	B    *R11

****************************************
*	Change disk in drives
*
* Entry: DSK# in MSByte R3 (ASCII)
* Exit: Disk changed in DSKxNUM and on Display
****************************************
CHGDSK	
	LI R0, ROW23+1		;Prompt for disk number
	LI R1, MSG5
	LI R2, _MSG5-MSG5	;
	BLWP @VMBW

	LI R4, KEYBUF
	CLR R5			;# Chars in buffer
	LI R2, ROW23+24		;Restore Cursor position
LP09	LI R1, >205F		;Cursor Underscore & Space
LP11	MOV R2, R0
	SWPB R1
	BLWP @VSBW

	LI R0, >0100
LP12	DEC R0
	JNE LP12

	BLWP @KSCAN
	MOVB @STATUS,R0
	JEQ LP11

	MOVB @>8375, R1
	ANDI R1, >FF00
	CI R1, >0F00		;FCTN 9 exit
	JEQ EXCHG 
	CI R1, >0D00		;enter
	JEQ JP06
	CI R1, >0800		;backspace
	JNE JP05
	MOV R2, R0		;Clear old Char before we backspace cursor
	LI R1, >205F		; "
	BLWP @VSBW		; "
	DEC R2			;Cursor - 1
	DEC R4			;Buffer - 1
	DEC R5			;Count -1
JP05	CI R2,ROW23+24		;Check if cursor position moved back to far
	JLT CHGDSK
	CI R2,ROW23+26		;Check if cursor position moved forward to far
	JGT LP09

	CI R1, >3000		;'0'
	JLT LP09
	CI R1, >3900		;'9'
	JGT LP09

	MOVB R1, *R4+		;Save key read
	INC R5			;Count
	MOV R2, R0		;Move cursor position
	INC R2
	BLWP @VSBW
	JMP LP09

JP06	CI R5, 0		;Nothing input
	JEQ CHGDSK

*******************
;Convert KEYBUF ASCII to VALUE
	LI R0, KEYBUF	;Point to Last Char
	A R5, R0	;Add number Digits
	DEC R0		; "

	MOVB *R0, R4
	DEC R0
	SWPB R4
	ANDI R4, >000F		;Change from ASCII to value 1-9
	DEC R5
	JEQ JP07
   
	MOVB *R0, R1
	DEC R0
	SWPB R1
	ANDI R1, >000F		;Change from ASCII to value 1-9

	MPY @N10, R1
	A R2, R4
	DEC R5
	JEQ JP07

	MOVB *R0, R1
	SWPB R1
	ANDI R1, >000F		;Change from ASCII to value 1-9
	MPY @N100, R1
	A R2, R4
	
	CI R4,255		;Repeat input if disk greater than 255		
	JGT CHGDSK	
JP07	SWPB R4

*********************
; R3 MSByte=Drive, R4 MSByte=Disk
	SRL R3, 9		;Move 3,4,7 in MSByte to 1-3 in LSByte
	MOVB R4, @DSKNUM-1(R3)	;Store disk # at DSKNUM 0-2
	SWPB R3

	LI R12, >1100		;Turn on DSR address space
	SBO 0

	LI R0, >7E00		;Command >81 inverted
	MOVB R0, @>5FF8		;Send command

	INV R3			;Invert
	MOVB R3, @>5FFE		;Send Drive number
	NOP
	INV R4
	MOVB R4, @>5FFE		;Send Disk number
	SBZ 0			;Turn off DSR address space

**** Clear input prompt on display
EXCHG
	MOV R11, R12
	BL @DSPCHG		;'1-3=CHG DSK, FCTN 1-3=CAT DSK'
	B *R12			;Return
********************************************************************
*** Clear Screen
CLS
	CLR R0
	LI R1, >2000		;MSB=' '
	LI R2, 768
LP04
	BLWP @VSBW		
	INC R0			
	DEC R2			
	JNE LP04
	B *R11

*** Display '1-3=CHG DSK, FCTN 1-3=CAT DSK'
DSPCHG	LI R0, ROW23+1		;
	LI R1, MSG6
	LI R2, _MSG6-MSG6	;
	BLWP @VMBW
	B *R11

*** Display DSKx.xxx and Disk names
DSPDSK
	MOV R11, R12		;Save return
	LI R0, ROW2+1		;DSKX.
	LI R1, MSG4
	LI R2, _MSG4-MSG4	;
	BLWP @VMBW

	LI R4, 3		;3 drives
	LI R5, DSKNUM
	LI R0, ROW2+6
LP06				
	MOVB *R5, R9		;Get disk number for drive x
	SRL R9, 8		;make byte a word
	LI R1, BUFF1
	BL @CV2ASC
	LI R1, BUFF1+1	;Skip 1st leading 0
	LI R2, 3		;Only put 3 digits on screen		
	BLWP @VMBW		;Put disk number on screen
		
	MOVB *R5+, R9		;Get disk number for drive x
	SRL R9, 8		;make byte a word
	MPY @N11, R9		;Point to name location in BUFF2
	AI R10, BUFF2		; "
	INC R10			;Skip byte to 1st Char of name
	MOV R10, R1
	AI R0, 27		;Row below DSKX and back 5 columns
	LI R2, 10
	BLWP @VMBW		;Put disk name on screen
	AI R0, -17		;Back up to DSKX row advance 10 columns
	DEC R4
	JNE LP06
	
	B *R12

*** Convert word to 4 digit ASCII
*Entry: R9=word to convert, R1 pointing to 8 byte buffer
*Exit: Buffer=1st 4 bytes string with leading 0s
*Exit: Buffer=2nd 4 bytes string leading 0s removed
CV2ASC
	MOV R9, R10

	CLR R9
	DIV @N1000, R9	;R9 has integer of result, R10 has remainder
 	SWPB R9
	ORI R9, >3000
	MOVB R9, *R1+		;Save integer

	CLR R9
	DIV @N100, R9	;R9 has integer of result, R10 has remainder
 	SWPB R9
	ORI R9, >3000
	MOVB R9, *R1+		;Save integer
	
	CLR R9			;R10 has remainder from previous division
	DIV @N10, R9		;R9 has integer of result, R10 has remainder	
	SWPB R9
	ORI R9, >3000
	MOVB R9, *R1+		;Save integer

	SWPB R10
	ORI R10, >3000
	MOVB R10,*R1+		;Save remainder

*Copy string to buffer+4 & Change leading 0s to space
	MOV @-4(R1),*R1		;Copy 1st 4 bytes to 2nd 4 bytes
	MOV @-2(R1),@2(R1)	; "
	LI R9, 3		;Only 1st 3 0s
LP17	
	CB @ASCII0, *R1
	JNE JP09		;Leave at 1st non-zero digit
	MOVB @SPACE, *R1+
	DEC R9
	JNE LP17
JP09
	B *R11

********************************************************************************
* E/A Utilities
********************************************************************************            
_KSCAN	LWPI >83E0                
       	MOV  R11,@EAREG+22           ;save to old r11
       	BL   @>000E
       	LWPI EAREG
       	MOV  R11,@>83F6              ;restore gpl r11
       	RTWP
 
*Register 0: Address in VDP RAM.
*Register 1: Most-significant byte contains the value to be written.                       
_VSBW  	BL   @VWR                 
       	MOVB @>0002(R13),@>8C00
       	RTWP

*Register 0: Starting address of the buffer in VDP RAM.
*Register 1: Starting address of the buffer in RAM.
*Register 2: The number of bytes to be written.                                  
_VMBW  	BL   @VWR                 
LP80  	MOVB *R1+,@>8C00
       	DEC  2
       	JNE  LP80                  
       	RTWP

*Register 0: Address in VDP RAM.
*Register 1: Value is placed in the most-significant byte.                               
_VSBR  	BL   @VRD                 
       	MOVB @>8800,@>0002(R13)
       	RTWP

*Register 0: Starting address of the buffer in VPP RAM.
*Register 1: Starting address of the buffer in RAM.
*Register 2: The number of bytes to be read.                                 
_VMBR  BL   @VRD                 
LP81  	MOVB @>8800,*R1+
       	DEC  2
       	JNE  lp81                  
       	RTWP

*Register 0: Least-significant byte contains the value to be written.
*Most-significant byte indicates the VDP Register to be written to.   
_VWTR  	MOV  *R13,R1                  
       	MOVB @>0001(R13),@>8C02
       	ORI  R1,>8000
       	MOVB R1,@>8C02
       	RTWP

VWR	LI   R1,>4000			;vdp write
       	JMP  jp82                  
VRD	CLR  R1 			;vdp read
JP82  	MOV  *R13,R2                  
       	MOVB @EAREG+5,@>8C02
	SOC  R1,R2
       	MOVB R2,@>8C02
       	MOV  @>0002(R13),R1           fetch old r1,r2
       	MOV  @>0004(R13),R2
       	B    *R11
*
*-------------------------------------
* DSRLNK Call DSR or subprogram
*-------------------------------------
SAVCRU	EQU >2032
SAVENT	EQU >2034
SAVLEN	EQU >2036
SAVPAB	EQU >2038
SAVVER	EQU >203A
NAMBUF	EQU >208C
DOT	TEXT '.'	      ;Used by DSRLNK
EQBIT	BYTE >20	      ; "
HEADID	BYTE >AA	      ;Could use >6000
	EVEN
_DSRLN
       MOV  *R14+,R5          ;get data word: >0008 = DSR, >000A = subprogram
       SZCB @EQBIT,R15        ;clear Eq bit
       MOV  @>8356,0          ;get name ptr
       MOV  R0,R9
       AI   R9,-8	      ;point to status/error byte in PAB
       BLWP @VSBR             ;VSBR: read size
       MOVB R1,R3             ;name size
       SRL  R3,8              ;make it a word
       SETO R4                ;character counter
       LI   R2,NAMBUF         ;name buffer

LP90   INC  R0
       INC  R4
       C    R4,R3             ;whole name done?
       JEQ  JP90              ;yes
       BLWP @VSBR             ;no: read a char with VSBR
       MOVB R1,*R2+           ;save it on buffer
       CB   R1,@DOT           ;is it . ?
       JNE  LP90              ;no: next char

JP90   MOV  R4,R4             ;yes: did we find any char before the dot?
       JEQ  JP95              ;empty name: error 0
       CI   R4,>0007          ;check name size
       JGT  JP95              ;8 char or more: error 0
       CLR  @>83D0            ;buffer for CRU address
       MOV  R4,@>8354         ;save name size
       MOV  R4,@SAVLEN        ;again for internal use
       INC  R4
       A    R4,@>8356         ;point at end-of-name
       MOV  @>8356,@SAVPAB    ;save for recall		
       LWPI >83E0             ;GPL workspace
       CLR  R1                ;call counter
       LI   R12,>0F00         ;CRU

LP91  MOV  R12,R12            ;first CRU?
       JEQ  JP91              ;yes: skip
       SBZ  R0                ;no: turn previous card off

JP91  AI   R12,>0100          ;next card
       CLR  @>83D0            ;reset buffer
       CI   R12,>2000         ;last card done?
       JEQ  JP94              ;yes: error 0
       MOV  R12,@>83D0        ;save current CRU
       SBO  R0                ;turn card on (if any)
       LI   R2,>4000
       CB   *R2,@HEADID       ;check if valid header (>AA)
       JNE  LP91              ;no: next card
       A    @DSRREG+10,R2    ;yes: get first link (sub or DSR)
       JMP  JP92

LP92  MOV  @>83D2,R2	      ;address of 'next link' word
       SBO  R0                ;make sure card is on

JP92  MOV  *R2,R2             ;next link
       JEQ  LP91              ;no more: next card
       MOV  R2,@>83D2         ;save address (ptr to next link)
       INCT R2
       MOV  *R2+,R9           ;program address
       MOVB @>8355,R5         ;name size
       JEQ  JP93              ;no name: execute
       CB   R5,*R2+           ;same size?
       JNE  LP92              ;no: next link
       SRL  R5,8              ;yes: make it a word
       LI   R6,NAMBUF         ;name buffer

LP93  CB   *R6+,*R2+          ;check name
       JNE  LP92              ;mismatch: next link
       DEC  R5
       JNE  LP93              ;next char

JP93  INC  R1                 ;occurences counter
       MOV  R1,@SAVVER        ;save it for recall
       MOV  R9,@SAVENT        ;save program address
       MOV  R12,@SAVCRU       ;save CRU
       BL   *R9               ;call DSR/subprogram
       JMP  LP92              ;keep scanning
       SBZ  R0                ;done: turn card off
       LWPI DSRREG           ;DSRLNK workspace
       MOV  R9,R0              ;status/error byte in PAB
       BLWP @VSBR             ;VSBR: read it
       SRL  R1,13             ;keep only error bits
       JNE  JP96              ;error
       RTWP                   ;no error: return to caller
 
JP94  LWPI DSRREG            ;back to DSRLNK workspace
JP95  CLR  R1                 ;error #0
JP96  SWPB R1
       MOVB R1,*R13           ;pass error code in caller's R0
       SOCB @EQBIT,R15        ;set eq bit
       RTWP                   ;return to caller

*********************************
KSCAN	DATA EAREG,_KSCAN
VSBW	DATA EAREG,_VSBW
VMBW	DATA EAREG,_VMBW
VSBR	DATA EAREG,_VSBR
VMBR	DATA EAREG,_VMBR
VWTR	DATA EAREG,_VWTR
DSRLNK	DATA DSRREG,_DSRLN

ROW0	EQU >0000
ROW1	EQU >0020
ROW2	EQU >0040
ROW3	EQU >0060
ROW4	EQU >0080
ROW5	EQU >00A0
ROW6	EQU >00C0
ROW7	EQU >00E0
ROW8	EQU >0100
ROW9	EQU >0120
ROW10	EQU >0140
ROW11	EQU >0160
ROW12	EQU >0180
ROW13	EQU >01A0
ROW14	EQU >01C0
ROW15	EQU >01E0
ROW16	EQU >0200
ROW17	EQU >0220
ROW18	EQU >0240
ROW19	EQU >0260
ROW20	EQU >0280
ROW21	EQU >02A0
ROW22	EQU >02C0
ROW23	EQU >02E0
 END                         